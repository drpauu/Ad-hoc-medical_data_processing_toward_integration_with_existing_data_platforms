{"ast":null,"code":"var _jsxFileName = \"/Users/pau/Desktop/GitHub/Ad-hoc_medical_data_processing_toward_integration_with_existing_data_platforms/src/pages/EditPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getData } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPage = () => {\n  _s();\n  const [data, setData] = useState([]); // Inicializamos el estado `data` como un array vacío\n\n  useEffect(() => {\n    // Llamada a getData para cargar los datos cuando el componente se monte\n    getData().then(fetchedData => {\n      setData(fetchedData); // Asignamos los datos al estado\n    });\n  }, []);\n\n  // Función para manejar la actualización de los datos (puedes personalizarla según tus necesidades)\n  const handleUpdate = (id, newData) => {\n    const updatedData = data.map((item, index) => {\n      if (index === id) {\n        return {\n          ...item,\n          ...newData\n        };\n      }\n      return item;\n    });\n    setData(updatedData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data && Array.isArray(data) && data.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.name, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUpdate(index, {\n            name: 'Updated Name'\n          }),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(EditPage, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = EditPage;\nexport default EditPage;\nvar _c;\n$RefreshReg$(_c, \"EditPage\");","map":{"version":3,"names":["React","useState","useEffect","getData","jsxDEV","_jsxDEV","EditPage","_s","data","setData","then","fetchedData","handleUpdate","id","newData","updatedData","map","item","index","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","name","onClick","_c","$RefreshReg$"],"sources":["/Users/pau/Desktop/GitHub/Ad-hoc_medical_data_processing_toward_integration_with_existing_data_platforms/src/pages/EditPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getData } from '../services/api';\n\nconst EditPage = () => {\n  const [data, setData] = useState([]);  // Inicializamos el estado `data` como un array vacío\n\n  useEffect(() => {\n    // Llamada a getData para cargar los datos cuando el componente se monte\n    getData().then(fetchedData => {\n      setData(fetchedData);  // Asignamos los datos al estado\n    });\n  }, []);\n\n  // Función para manejar la actualización de los datos (puedes personalizarla según tus necesidades)\n  const handleUpdate = (id, newData) => {\n    const updatedData = data.map((item, index) => {\n      if (index === id) {\n        return { ...item, ...newData };\n      }\n      return item;\n    });\n    setData(updatedData);\n  };\n\n  return (\n    <div>\n      <h1>Edit Data</h1>\n      <ul>\n        {/* Verificamos que `data` sea un array antes de mapear */}\n        {data && Array.isArray(data) && data.map((item, index) => (\n          <li key={index}>\n            {item.name} <button onClick={() => handleUpdate(index, { name: 'Updated Name' })}>Edit</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default EditPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAEvCC,SAAS,CAAC,MAAM;IACd;IACAC,OAAO,CAAC,CAAC,CAACO,IAAI,CAACC,WAAW,IAAI;MAC5BF,OAAO,CAACE,WAAW,CAAC,CAAC,CAAE;IACzB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,YAAY,GAAGA,CAACC,EAAE,EAAEC,OAAO,KAAK;IACpC,MAAMC,WAAW,GAAGP,IAAI,CAACQ,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC5C,IAAIA,KAAK,KAAKL,EAAE,EAAE;QAChB,OAAO;UAAE,GAAGI,IAAI;UAAE,GAAGH;QAAQ,CAAC;MAChC;MACA,OAAOG,IAAI;IACb,CAAC,CAAC;IACFR,OAAO,CAACM,WAAW,CAAC;EACtB,CAAC;EAED,oBACEV,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBlB,OAAA;MAAAc,QAAA,EAEGX,IAAI,IAAIgB,KAAK,CAACC,OAAO,CAACjB,IAAI,CAAC,IAAIA,IAAI,CAACQ,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnDb,OAAA;QAAAc,QAAA,GACGF,IAAI,CAACS,IAAI,EAAC,GAAC,eAAArB,OAAA;UAAQsB,OAAO,EAAEA,CAAA,KAAMf,YAAY,CAACM,KAAK,EAAE;YAAEQ,IAAI,EAAE;UAAe,CAAC,CAAE;UAAAP,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GADxFL,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAChB,EAAA,CAlCID,QAAQ;AAAAsB,EAAA,GAARtB,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}