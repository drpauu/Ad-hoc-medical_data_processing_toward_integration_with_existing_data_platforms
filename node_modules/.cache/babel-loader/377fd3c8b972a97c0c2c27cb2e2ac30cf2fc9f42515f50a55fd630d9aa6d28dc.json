{"ast":null,"code":"var _jsxFileName = \"/Users/pau/Desktop/GitHub/Ad-hoc_medical_data_processing_toward_integration_with_existing_data_platforms/src/pages/TestList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport data from '../json/database.json'; // Importamos el JSON directamente\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestList = () => {\n  _s();\n  const [tests, setTests] = useState([]);\n  useEffect(() => {\n    if (data && data.test) {\n      // Verificamos si `test` es un array o un objeto\n      if (Array.isArray(data.test)) {\n        setTests(data.test);\n      } else {\n        // Si no es un array, lo convertimos en un array con un solo elemento\n        setTests([data.test]);\n      }\n    }\n  }, []);\n  if (tests.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tests available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"List of Tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tests.map((test, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/test/${test.tid}`,\n          children: [\"Test \", index + 1, \": ID \", test.tid]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(TestList, \"FxEWQGYuZijDeGUIGSMauBw8Rzg=\");\n_c = TestList;\nexport default TestList;\nvar _c;\n$RefreshReg$(_c, \"TestList\");","map":{"version":3,"names":["React","useState","useEffect","Link","data","jsxDEV","_jsxDEV","TestList","_s","tests","setTests","test","Array","isArray","length","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","to","tid","_c","$RefreshReg$"],"sources":["/Users/pau/Desktop/GitHub/Ad-hoc_medical_data_processing_toward_integration_with_existing_data_platforms/src/pages/TestList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport data from '../json/database.json';  // Importamos el JSON directamente\n\nconst TestList = () => {\n  const [tests, setTests] = useState([]);\n\n  useEffect(() => {\n    if (data && data.test) {\n      // Verificamos si `test` es un array o un objeto\n      if (Array.isArray(data.test)) {\n        setTests(data.test);\n      } else {\n        // Si no es un array, lo convertimos en un array con un solo elemento\n        setTests([data.test]);\n      }\n    }\n  }, []);\n\n  if (tests.length === 0) {\n    return <p>No tests available.</p>;\n  }\n\n  return (\n    <div>\n      <h1>List of Tests</h1>\n      <ul>\n        {tests.map((test, index) => (\n          <li key={index}>\n            {/* Mostramos el ID del test */}\n            <Link to={`/test/${test.tid}`}>\n              Test {index + 1}: ID {test.tid}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TestList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,IAAI,MAAM,uBAAuB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,IAAIE,IAAI,IAAIA,IAAI,CAACO,IAAI,EAAE;MACrB;MACA,IAAIC,KAAK,CAACC,OAAO,CAACT,IAAI,CAACO,IAAI,CAAC,EAAE;QAC5BD,QAAQ,CAACN,IAAI,CAACO,IAAI,CAAC;MACrB,CAAC,MAAM;QACL;QACAD,QAAQ,CAAC,CAACN,IAAI,CAACO,IAAI,CAAC,CAAC;MACvB;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,KAAK,CAACK,MAAM,KAAK,CAAC,EAAE;IACtB,oBAAOR,OAAA;MAAAS,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACnC;EAEA,oBACEb,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAAS,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBb,OAAA;MAAAS,QAAA,EACGN,KAAK,CAACW,GAAG,CAAC,CAACT,IAAI,EAAEU,KAAK,kBACrBf,OAAA;QAAAS,QAAA,eAEET,OAAA,CAACH,IAAI;UAACmB,EAAE,EAAE,SAASX,IAAI,CAACY,GAAG,EAAG;UAAAR,QAAA,GAAC,OACxB,EAACM,KAAK,GAAG,CAAC,EAAC,OAAK,EAACV,IAAI,CAACY,GAAG;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B;MAAC,GAJAE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACX,EAAA,CAlCID,QAAQ;AAAAiB,EAAA,GAARjB,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}