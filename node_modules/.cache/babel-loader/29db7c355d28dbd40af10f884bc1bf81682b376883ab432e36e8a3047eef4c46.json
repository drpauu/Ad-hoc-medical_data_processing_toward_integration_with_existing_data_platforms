{"ast":null,"code":"var _jsxFileName = \"/Users/pau/Desktop/GitHub/Ad-hoc_medical_data_processing_toward_integration_with_existing_data_platforms/src/pages/TestList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { fetchData } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestList = () => {\n  _s();\n  const [tests, setTests] = useState([]);\n  useEffect(() => {\n    // Obtenemos los datos del archivo JSON\n    fetchData().then(data => {\n      if (data && data.test) {\n        setTests(Array.isArray(data.test) ? data.test : [data.test]); // Asegurarse de que los tests sean un array\n      } else {\n        console.error('No data found');\n      }\n    });\n  }, []);\n  if (tests.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tests available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this); // Mostrar mensaje si no hay tests\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"List of Tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tests.map((test, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/test/${test.tid}`,\n          children: [\"Test \", index + 1, \": ID \", test.tid]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(TestList, \"FxEWQGYuZijDeGUIGSMauBw8Rzg=\");\n_c = TestList;\nexport default TestList;\nvar _c;\n$RefreshReg$(_c, \"TestList\");","map":{"version":3,"names":["React","useEffect","useState","Link","fetchData","jsxDEV","_jsxDEV","TestList","_s","tests","setTests","then","data","test","Array","isArray","console","error","length","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","to","tid","_c","$RefreshReg$"],"sources":["/Users/pau/Desktop/GitHub/Ad-hoc_medical_data_processing_toward_integration_with_existing_data_platforms/src/pages/TestList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { fetchData } from '../services/api';\n\nconst TestList = () => {\n  const [tests, setTests] = useState([]);\n\n  useEffect(() => {\n    // Obtenemos los datos del archivo JSON\n    fetchData().then(data => {\n      if (data && data.test) {\n        setTests(Array.isArray(data.test) ? data.test : [data.test]);  // Asegurarse de que los tests sean un array\n      } else {\n        console.error('No data found');\n      }\n    });\n  }, []);\n\n  if (tests.length === 0) {\n    return <p>No tests available.</p>;  // Mostrar mensaje si no hay tests\n  }\n\n  return (\n    <div>\n      <h1>List of Tests</h1>\n      <ul>\n        {tests.map((test, index) => (\n          <li key={index}>\n            {/* Numeramos los tests de manera ascendente */}\n            <Link to={`/test/${test.tid}`}>\n              Test {index + 1}: ID {test.tid}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TestList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,SAAS,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd;IACAG,SAAS,CAAC,CAAC,CAACO,IAAI,CAACC,IAAI,IAAI;MACvB,IAAIA,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAE;QACrBH,QAAQ,CAACI,KAAK,CAACC,OAAO,CAACH,IAAI,CAACC,IAAI,CAAC,GAAGD,IAAI,CAACC,IAAI,GAAG,CAACD,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAE;MACjE,CAAC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,eAAe,CAAC;MAChC;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIR,KAAK,CAACS,MAAM,KAAK,CAAC,EAAE;IACtB,oBAAOZ,OAAA;MAAAa,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAE;EACtC;EAEA,oBACEjB,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBjB,OAAA;MAAAa,QAAA,EACGV,KAAK,CAACe,GAAG,CAAC,CAACX,IAAI,EAAEY,KAAK,kBACrBnB,OAAA;QAAAa,QAAA,eAEEb,OAAA,CAACH,IAAI;UAACuB,EAAE,EAAE,SAASb,IAAI,CAACc,GAAG,EAAG;UAAAR,QAAA,GAAC,OACxB,EAACM,KAAK,GAAG,CAAC,EAAC,OAAK,EAACZ,IAAI,CAACc,GAAG;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B;MAAC,GAJAE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACf,EAAA,CAjCID,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AAmCd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}